#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Node of the adjacency list
struct node {
    int vertex, weight;
    char name[20];
    struct node * next;
};

// Follows head insertion to give O(1) insertion
struct node * addEdge(struct node * head, int vertex, int weight)
{
    struct node * newNode = (struct node *) calloc(1, sizeof(struct node));

    newNode->vertex = vertex;
    newNode->weight = weight;
    newNode->next = head;

    return newNode;
}

// Retuns the vertex which is not visited and has least distance
int getMinVertex(int distances[], int visited[], int vertices)
{
	int min = INT_MAX, index = -1, i;

	for (i = 1; i <= vertices; ++i) {
		if (visited[i] == 0 && min > distances[i]) {
			min = distances[i];
			index = i;
		}
	}

	return index;
}

// Dijkstra's Algorithm function
void dijkstra(struct node * adjacencyList[], int vertices, int startVertex, int distances[], int parent[])
{
    int i, visited[vertices + 1];

    // Initially no routes to vertices are know, so all are infinity
    for (i = 1; i <= vertices; ++i) {
        distances[i] = INT_MAX;
        parent[i] = 0;
        visited[i] = 0;
    }

    // Setting distance to source to zero
    distances[startVertex] = 0;

    for (i = 1; i <= vertices; ++i) {     // Untill there are vertices to be processed
        int minVertex = getMinVertex(distances, visited, vertices);	// Greedily process the nearest vertex
		struct node * trav = adjacencyList[minVertex];    // Checking all the vertices adjacent to 'min'
		visited[minVertex] = 1;

        while (trav != NULL) {
        	int u = minVertex;
        	int v = trav->vertex;
        	int w = trav->weight;

            if (distances[u] != INT_MAX && distances[v] > distances[u] + w) {
                // We have discovered a new shortest route, make the neccesary adjustments in data
                distances[v] = distances[u] + w;
                parent[v] = u;
            }

            trav = trav->next;
        }
    }
}

// Recursively looks at a vertex's parent to print the path
void printPath(int parent[], int vertex, int startVertex)
{
int a=0; int num ;char name[30];
    if (vertex == startVertex) {	// reached the source vertex
        printf("%d ", startVertex);a=startVertex;
        //return;
    } else if (parent[vertex] == 0) {	// current vertex has no parent
    	printf("%d ", vertex); a=vertex;
    	return;
	} else {	// go for the current vertex's parent
        printPath(parent, parent[vertex], startVertex);
        printf("%d ", vertex);a=vertex;
    }
    
    FILE *fptr;
    fptr=fopen("name.txt","r");
    while(fscanf(fptr,"%d %s",&num,name)!=EOF){
        int temnum=num;
        char *tempname=name;
        if(temnum==a)
        printf("%s\n",tempname);
    }
   
fclose(fptr);
        }
    
    
void cost(int startVertex,int i){

int a,b,cost=0;
     FILE *fp;
       fp = fopen("cost.csv", "r");
      if (!fp)  
        printf("failed to open file for reading\n");   
 
    while(!feof(fp)){
        fscanf(fp,"%d,%d,%d",&a,&b,&cost);
        if(startVertex==a&&i==b){
            printf("%d\n",cost );break;
                    }
}
fclose(fp);

}


int main()
{
    int vertices, edges, i, j, v1, v2, w, startVertex;
    
    vertices=122;
    edges=240;

    struct node * adjacencyList[vertices + 1];	// to use the array as 1-indexed for simplicity
    int distances[vertices + 1];
    int parent[vertices + 1];

    for (i = 0; i <= vertices; ++i) {	// Must initialize your array
        adjacencyList[i] = NULL;
    }
    //red
    for(i=0;i<=vertices;i++){
     adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2);
     if(i==1){adjacencyList[i] = addEdge(adjacencyList[i], 22, 3);} //1 is xinbeitou
     if(i==7){adjacencyList[i] = addEdge(adjacencyList[i], 44, 3);}//Dongmen(7)-Zhongxiao Xinsheng(44)
     if(i==8){adjacencyList[i] = addEdge(adjacencyList[i], 63, 2);}//Memorial Hall(8)-Xiaonanmen(63)
     if(i==7||i==22||i==25||i==26||i==27){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);}
     if(i==11||i==12){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 1);}
     if(i==11){adjacencyList[i] = addEdge(adjacencyList[i], 67, 2);}//Zhongshan(11)-Songjiang Nanjing(67)
     if(i==10){adjacencyList[i] = addEdge(adjacencyList[i], 41, 3);adjacencyList[i] = addEdge(adjacencyList[i], 43, 2);}
     //taipei-xinmen and taipei-temple
     if(i==13){adjacencyList[i] = addEdge(adjacencyList[i], 83, 2);}//Minquan(13)-Daqiaotou(83)
     if(i==5){adjacencyList[i] = addEdge(adjacencyList[i], 45, 2);}//Daan(5)-Zhongxiao Fuxing(45)
        
    }
    for(i=3;i<=vertices;i++){
        adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2);
     if(i==7){adjacencyList[i] = addEdge(adjacencyList[i], 61, 4);}  //Dongmen(7)-Guting(61)
     if(i==22){adjacencyList[i] = addEdge(adjacencyList[i], 1, 3);} //1 is xinbeitou
     if(i==11){adjacencyList[i] = addEdge(adjacencyList[i], 65, 2);}//Zhongshan(11)-North Gate(65)
     if(i==8||i==23||i==26||i==27||i==28){adjacencyList[i] = addEdge(adjacencyList[i], i-1, 3);}
     if(i==12||i==13){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 1);}
     if(i==8){adjacencyList[i] = addEdge(adjacencyList[i], 61, 2);}//Memorial Hall(8)-Guting(61)
     if(i==13){adjacencyList[i] = addEdge(adjacencyList[i], 81, 2);}//Minquan(13)-Zhongshan Elementary School(81)
     if(i==5){adjacencyList[i] = addEdge(adjacencyList[i], 109, 2);}//Daan(5)-Technology Building(109)
    }
    //blue

    for(i=31;i<=vertices2;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2);
       if(i==31||i==34){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);}
       if(i==39){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 4);}
       if(i==41){adjacencyList[i] = addEdge(adjacencyList[i], 10, 3);}//xinmen(41)-taipei(10)
       if(i==41){adjacencyList[i] = addEdge(adjacencyList[i], 65, 2);} //xinmen(41)-North Gate(65)
       if(i==44){adjacencyList[i] = addEdge(adjacencyList[i], 67, 2);}//Zhongxiao Xinsheng(44)-Songjiang Nanjing(67)
       if(i==45){adjacencyList[i] = addEdge(adjacencyList[i], 68, 2);}//Zhongxiao Fuxing(45)-Nanjing Fuxing(68)
       if(i==52){adjacencyList[i] = addEdge(adjacencyList[i], 123, 2);}//Nangang Exhibition(123)-Nangang(52)
    }
    for(i=32;i<=vertices;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2); 
       if(i==32||i==35){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);}
       if(i==40){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 4);}
       if(i==41){adjacencyList[i] = addEdge(adjacencyList[i], 63, 2);}//xinmen(41)-Xiaonanmen(63)
       if(i==43){adjacencyList[i] = addEdge(adjacencyList[i], 10, 2);} //temple(43)
       if(i==44){adjacencyList[i] = addEdge(adjacencyList[i], 7, 2);}//Zhongxiao Xinsheng(44)-Dongmen(7)
       if(i==45){adjacencyList[i] = addEdge(adjacencyList[i], 5, 2);}//Zhongxiao Fuxing(45)-Daan(5)
       

    }
    //green
    for(i=53;i<=vertices;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2);
    if(i==55){adjacencyList[i] = addEdge(adjacencyList[i], 73, 4);}
    if(i==61){adjacencyList[i] = addEdge(adjacencyList[i], 8, 2);}//Guting(61)-Memorial Hall(8)
    if(i==61){adjacencyList[i] = addEdge(adjacencyList[i], 7, 4);}//Guting(61)-Dongmen(7)
    if(i==63){adjacencyList[i] = addEdge(adjacencyList[i], 41, 2);}//Xiaonanmen(63)-xinmen(41)
    if(i==65){adjacencyList[i] = addEdge(adjacencyList[i], 11, 2);}//North Gate(65)-Zhongshan(11)
    if(i==67){adjacencyList[i] = addEdge(adjacencyList[i], 80, 2);}//Songjiang Nanjing(67)-Xingtian Temple(80)
    if(i==68){adjacencyList[i] = addEdge(adjacencyList[i], 111, 2);}//Nanjing Fuxing(68)-Zhongshan Junior High School(111)
    if(i==70){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);} 
}
    for(i=54;i<=vertices;i++){
        adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2);
        if(i==61){adjacencyList[i] = addEdge(adjacencyList[i], 78, 4);}//Guting(61)-Dingxi(78)
        if(i==63){adjacencyList[i] = addEdge(adjacencyList[i], 8, 2);}//Xiaonanmen(63)-Memorial Hall(8)
        if(i==65){adjacencyList[i] = addEdge(adjacencyList[i], 41, 2);}//North Gate(65)-xinmen(41)
        if(i==67){adjacencyList[i] = addEdge(adjacencyList[i], 11, 2);}//Songjiang Nanjing(67)-Zhongshan(11)
        if(i==67){adjacencyList[i] = addEdge(adjacencyList[i], 44, 2);}//Songjiang Nanjing(67)-Zhongxiao Xinsheng(44)
        if(i==68){adjacencyList[i] = addEdge(adjacencyList[i], 45, 2);}//Nanjing Fuxing(68)-Zhongxiao Fuxing(45)
        if(i==71){adjacencyList[i] = addEdge(adjacencyList[i], i-1, 3);}
        if(i==73){adjacencyList[i] = addEdge(adjacencyList[i], 55, 4);}
        
    }

    //yellow
    for(i=75;i<=92;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2);
       if(i==78){adjacencyList[i] = addEdge(adjacencyList[i], 61, 4);} //Dingxi(78)-Guting(61)
       if(i==81){adjacencyList[i] = addEdge(adjacencyList[i], 13, 2);}//Zhongshan Elementary School(81)-Minquan(13)
       if(i==86||i==89||i==91){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);}
       if(i==83){adjacencyList[i] = addEdge(adjacencyList[i], 95, 3);}//Daqiaotou(83)-Sanchong Elementary School(95)
       
       
    }
    for(i=76;i<=92;i++){
        adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2);
        if(i==87||i==90||i==92){adjacencyList[i] = addEdge(adjacencyList[i], i-1, 3);}
        if(i==80){adjacencyList[i] = addEdge(adjacencyList[i], 67, 2);}//Xingtian Temple(80)-Songjiang Nanjing(67)
        if(i==83){adjacencyList[i] = addEdge(adjacencyList[i], 13, 2);}//Daqiaotou(83)-Minquan(13)
    }
     for(i=95;i<=99;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2); }
       for(i=96;i<=100;i++){
        adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2);}


    //brown
    for(i=102;i<=vertices;i++){
       adjacencyList[i] = addEdge(adjacencyList[i], i+1, 2);
       if(i==103){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 1);}
       if(i==106||i==108||i==111||i==112||i==119){adjacencyList[i] = addEdge(adjacencyList[i], i+1, 3);}
       if(i==109){adjacencyList[i] = addEdge(adjacencyList[i], 5, 2);}//Technology Building(109)-Daan(5)
       if(i==122){adjacencyList[i] = addEdge(adjacencyList[i], 123, 2);}//Nangang Software park(122)-Nangang Exhibition(123)
    }
    for(i=103;i<=vertices;i++){
        adjacencyList[i] = addEdge(adjacencyList[i], i-1, 2);
        if(i==104){adjacencyList[i] = addEdge(adjacencyList[i], i-1, 1);}
        if(i==107||i==109||i==112||i==113||i==120){adjacencyList[i] = addEdge(adjacencyList[i], i-1, 3);}
        if(i==111){adjacencyList[i] = addEdge(adjacencyList[i], 68, 2);}//Zhongshan Junior High School(111)-Nanjing Fuxing(68)
        if(i==123){adjacencyList[i] = addEdge(adjacencyList[i], 122, 2);}//Nangang Exhibition(123)-Nangang Software park(122)
        if(i==123){adjacencyList[i] = addEdge(adjacencyList[i], 52, 2);}//Nangang Exhibition(123)-Nangang (52)
    }


    printf("Enter start vertex -\n");
    scanf("%d", &startVertex);
    dijkstra(adjacencyList, vertices, startVertex, distances, parent);
    
    printf("Enter last vertex -\n");
    scanf("%d", &i);
    printf("cost=");
    cost(startVertex,i);
    printf("Shortest distances -\n");
    printf("Vertex %d, Time = %d min, Parent = %d, ",i , distances[i], parent[i]);
        printf("\nPath = ");
        printPath(parent, i, startVertex);
        printf("\n");


    return 0;
}